#!/usr/bin/perl -w
# -*- mode: Perl; tab-width: 4; -*-
# vim: ts=4 sw=4 noet
#
# bootstrap - perl script to install and bootstrap a Fink
#								 installation from source
#
# Fink - a package manager that downloads source and installs it
# Copyright (c) 2001 Christoph Pfisterer
# Copyright (c) 2001-2009 The Fink Package Manager Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
#

use 5.008_001;	 # perl 5.8.1 or newer required
use strict;
use warnings;

use FindBin;
use lib "$FindBin::RealBin/perlmod";
use IO::Handle;

$| = 1;

my $homebase = $FindBin::RealBin;
chdir $homebase;

### get the architecture... (and offer a choice to users where appropriate)

my $arch;

foreach ('/usr/bin/uname', '/bin/uname') {
# check some common places (why aren't we using $ENV{PATH}?)
	if (-x $_) {
		chomp($arch = `$_ -p 2>/dev/null`);
		chomp($arch = `$_ -m 2>/dev/null`) if ($arch eq "");
		last;
	}
}
if (not defined $arch) {
	die "Could not find an 'arch' executable\n";
}

#load a Fink module
require Fink::CLI;
import Fink::CLI qw(&print_breaking &prompt &prompt_boolean &prompt_selection);

### if architecture is i386, and darwin is at least 9, then test for
### 64bit capability

my ($version, $vers);
# are we on intel?
if ($arch eq "i386") {
	foreach ('/usr/bin/uname', '/bin/uname') {
    # check some common places (why aren't we using $ENV{PATH}?)
		if (-x $_) {
			chomp($version = `$_ -r 2>/dev/null`);
			last;
		}
	}
	($vers) = split( /\./, $version );
# is Darwin at least 9?
	if ((defined $vers) and ($vers >= 9)) {
# check for 64bit capability
        my $is64bit = 0;
        if (open(SYSCTL, 'sysctl -a 2>/dev/null |')) {
			my ($key, $value);
			while (<SYSCTL>) {
                        ($key, $value) = $_ =~ /^(\S+)\s*\:\s*(.*?)\s*$/;
                        next unless (defined $key and defined $value);
                        if ($key =~ /^(hw.optional.x86_64|hw.optional.64bitops|hw.cpu64bit_capable)$/ and $value eq "1") {
                                $is64bit = 1;
                                last;
                        }
			}
			close(SYSCTL);
        }
		if ($is64bit) {
# ask the user
			my $arch_intro= "Your hardware is a 64bit-compatible intel " .
				"processor, so you have the option of running Fink in ".
				"64bit-only mode.  This is not recommended for most ".
				"users, since many more packages are available for the ".
				"default mode (which is mostly 32bit but includes some ".
				"64bit packages).  Which mode would you like to use?";
			$arch = &prompt_selection("Choose a mode:", intro => $arch_intro, default => [ value => "i386" ], choices => [ "default (mostly 32bit)" => "i386" , "64bit-only" => "x86_64" ] );
		}
	}
}



### patch FinkVersion.pm.in ###

{
my $output = "$FindBin::RealBin/perlmod/Fink/FinkVersion.pm";
my $outputhandle = IO::Handle->new();
my $input = $output . '.in';
my $inputhandle = IO::Handle->new();
chomp(my $version = `cat VERSION`);

open($inputhandle,  '<', $input ) or die "ERROR: Cannot open $input for reading: $!\n";
open($outputhandle, '>', $output) or die "ERROR: Cannot open $output for writing: $!\n";

while (defined ($_=<$inputhandle>)) {
	s/\@VERSION\@/$version/g;
	s/\@ARCHITECTURE\@/$arch/g;
	print $outputhandle $_;
}

close $inputhandle;
close $outputhandle;
}

use Fink::Services;
import Fink::Services qw(&execute);

my $cmd = "'$homebase/bootstrap-phase2.pl'";
if ($#ARGV >= 0) {
	$cmd .= " '".join("' '", @ARGV)."'";
}

my $osMajorVer = `uname -r | cut -d. -f1`;

my $perlexe  = "/usr/bin/perl";

#	print "$osMajorVer\n";

if ($osMajorVer > 9) { 
	$perlexe = "/usr/bin/arch -arch $arch /usr/bin/perl5.10.0";
}

$cmd = "$perlexe $cmd";

exit &execute($cmd, quiet=>1);

### eof
exit 0;
