#! /usr/bin/perl -w
#
# fink-virtual-pkgs
# Copyright (c) 2001 Christoph Pfisterer
# Copyright (c) 2001-2003 The Fink Package Manager Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

require 5.006;
use strict;
use Getopt::Long;
my $standalone = 0;
UseFinkModules();
Getopt::Long::Configure(qw(bundling ignore_case require_order));
my ($dlist, $hash, $pkgname, $epoch, @versions);
my %options = 
   (
     "dpkg" => 0,
     "apt" => 0,
   );
GetOptions(
	'dpkg|d' => sub { $options{dpkg} = 1},
	'apt|a' => sub {  $options{apt} = 1}
	) or die "Unknown option";
if ($options{dpkg} and $options{apt}) { die "Can only specify one option dpkg or apt" }
if ($options{apt}) {
	open(FH,">/tmp/finkaptstatus") || die "Can not open file /tmp/finkaptstatus for writing";
	select FH;
	}
if ($standalone == 0)
{	
	$dlist = Fink::VirtPackage->list();
	foreach $pkgname (keys %$dlist) {
		$hash = $dlist->{$pkgname};
		$epoch=0;
		if ($options{dpkg}) {
			if (@versions = parse_fullversion($hash->{version})) {
				printf "%s\t%lu\t%s\t%s\n",$hash->{package},$versions[0],$versions[1],$versions[2];
			}	
		} else {
			printf "Package: %s\nStatus: install ok installed\nVersion: %s\n\n", $hash->{package},$hash->{version};
		}	
	}
}
else
{
# We are running without fink modules
	my ($dummy);
	my ($darwin_version, $macosx_version, $cctools_version, $cctools_single_module);
	# determine the kernel version
	($dummy,$dummy,$darwin_version) = uname();

	# Now the Mac OS X version
	$macosx_version = 0;
	if (-x "/usr/bin/sw_vers") {
		$dummy = open(SW_VERS, "/usr/bin/sw_vers |") or die "Couldn't determine system version: $!\n";
		while (<SW_VERS>) {
			chomp;
			if (/(ProductVersion\:)\s*([^\s]*)/) {
				$macosx_version = $2;
				last;
			}
		}
	}

	# now find the cctools version
	if (-x "/usr/bin/ld") {
		foreach(`what /usr/bin/ld`) {
			if (/cctools-(\d+)/) {
				$cctools_version = $1;
				last;
			}
		}
	}

	if (my $cctestfile = POSIX::tmpnam()) {
		system("touch ${cctestfile}.c");
		if (system("cc -o ${cctestfile}.dylib ${cctestfile}.c -dynamiclib -single_module") == 0) {
			$cctools_single_module = '1.0';
		} else {
			$cctools_single_module = undef;
		}
		unlink($cctestfile);
		unlink("${cctestfile}.c");
		unlink("${cctestfile}.dylib");
	}
	if ($options{dpkg})
	{
		printf "darwin\t0\t%s\t1\n",$darwin_version;
		if ($macosx_version ne 0) {
			printf "macosx\t0\t%s\t1\n",$macosx_version;
		}
		if (defined ($cctools_version)) {
			printf "cctools\t0\t%s\t1\n",$cctools_version;
		}
		if ($cctools_single_module) {
			printf "cctools-single-module\t0\t%s\t1\n",$cctools_single_module;
		}
	}
	else
	{
		printf "Package: darwin\nStatus: install ok installed\nVersion: %s-1\n\n",$darwin_version;
		if ($macosx_version ne 0) {
			printf "Package: macosx\nStatus: install ok installed\nVersion: %s-1\n\n",$macosx_version;
		}
		if (defined ($cctools_version)) {
			printf "Package: cctools\nStatus: install ok installed\nVersion: %s-1\n\n",$cctools_version;
		}
		if ($cctools_single_module) {
			printf "Package: cctools-single-module\nStatus: install ok installed\nVersion: %s-1\n\n",$cctools_single_module;
		}	
	}
}
if ($options{apt}) {
	select STDOUT;
	close FH;
}


sub UseFinkModules {
	# Be careful about using fink modules
	if (-d '@BASEPATH@/lib/perl5') {
		use lib '@BASEPATH@/lib/perl5';
	}
	else
	{
		$standalone=1;
	}
	if (eval { require Fink::Status; 1; }) {
		import Fink::Status;
	}
	else
	{
		$standalone=1;
	}
	if (eval { require Fink::VirtPackage; 1; }) {
		import Fink::VirtPackage;
	}
	else
	{
		$standalone=1;
	}
	if (eval { require Fink::Services; 1; }) {
		import Fink::Services qw(&parse_fullversion)
	}
	else
	{
		$standalone=1;
	}
	if ($standalone == 1)
	{
		use POSIX qw(uname);
	}

}