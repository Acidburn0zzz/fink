#!/usr/bin/perl -w
#
# postinstall.pl - perl script to check and store which OS version we
#                are running, and to setup the dists directory in
#                new (post-10.1) format
#
# Fink - a package manager that downloads source and installs it
# Copyright (c) 2001 Christoph Pfisterer
# Copyright (c) 2001-2005 The Fink Package Manager Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

$| = 1;
use 5.006;  # perl 5.6.0 or newer required
use strict;

use lib "@PREFIX@/lib/perl5";

use Fink::Bootstrap qw(&check_host);
use Fink::Services qw(&read_config &execute);
use Fink::CLI qw(&print_breaking &prompt_boolean);

use Fink::Config qw($config);

use File::Find;
use File::Basename;

my ($basepath);
$basepath = "@PREFIX@";

# read the configuration file
my $config;
my $configpath = "@PREFIX@/etc/fink.conf";
if (-f $configpath) {
  $config = &Fink::Services::read_config($configpath, 
                                         { Basepath => '@PREFIX@' }
                                        );
} else {
  print "ERROR: Configuration file \"$configpath\" not found.\n";
  exit 1;
}

### check if we like this system

print "Checking system...";
my ($host);

my ($distribution);

$host = `$basepath/lib/fink/update/config.guess`;
chomp($host);
if ($host =~ /^\s*$/) {
  print " ERROR: Can't determine host type.\n";
  exit 1;
}
print " $host\n";

$distribution = check_host($host);
if ($distribution eq "unknown") {
	exit(1);
}

### save $distribution in the config file

$config->set_param("Distribution", $distribution);
$config->save();

### Find the user who owns dists

my ($username, @sb, $distdir);

$distdir = "$basepath/fink/dists" ;
$username = "root" ;

if (-d "$distdir/CVS") {
  @sb = stat("$distdir/CVS");
  if ($sb[4] != 0 and $> != $sb[4]) {
    ($username) = getpwuid($sb[4]);
  }
}

### If the old dists directory has not yet been moved to $basepath/fink/10.1:
###  1) move it there, add appropriate symlinks to dists
###  2) re-do the symlinks in /sw/fink/debs to point to the new locations
###  3) to enable apt to find these old debs, we need some additions to
###     $basepath/etc/apt/sources.list which are made in Config.pm

my $basenm;

if (not -l $distdir) {
  print "Needs an update...\n";
  rename $distdir, "$basepath/fink/10.1" or die "cannot rename $distdir to $basepath/fink/10.2";
  symlink "$basepath/fink/10.1", "$distdir" or die "ERROR: Can't create link from $basepath/fink/10.1 to $distdir\n";

  ### we create a place where apt can find the old deb files (via symlink)

  mkdir "$basepath/fink/old";
  unlink "$basepath/fink/old/dists";
  symlink "$basepath/fink/10.1", "$basepath/fink/old/dists" or die "ERROR: Can't create link from $basepath/fink/10.1 to $basepath/fink/old/dists\n";


  ### Now see if CVS is present...
  ### If it is, we need to create $basepath/fink/10.2 as well as setup CVS
  ### in both $basepath/fink/10.1 and $basepath/fink/10.2

  if (-d $basepath."/fink/CVS") {
    print "\n NOTE: You have fink set up to use CVS for updates, and with this\n version of fink, the CVS setup has slightly changed.  After fink has\n finished setting up, you should immediately run 'fink selfupdate-cvs',\n 'fink scanpackages', and then 'apt-get update' in order to \n complete your upgrade.\n\n";
    if (not -d $basepath."/fink/10.2") {
      if(&execute("/bin/mkdir -p $basepath/fink/10.2/local/main/finkinfo")) {
	print "ERROR: couldn't create directory $basepath/fink/10.2/local/main/finkinfo\n";
	exit 1;
      }
      if (&execute("/usr/sbin/chown -R $username $basepath/fink/10.2")) {
	print "ERROR: couldn't change ownership of $basepath/fink/10.2 to $username\n";
	exit 1;
      }
    }
    
    ### clear out files which will be recreated by CVS:
    unlink "$basepath/fink/.cvsignore", "$basepath/fink/ChangeLog", "$basepath/fink/README", "$basepath/fink/VERSION", "$basepath/fink/inject.pl", "$basepath/fink/stamp-cvs-live";

    ### clear out CVS files which we are going to rewrite
    unlink "$basepath/fink/CVS/Entries", "$basepath/fink/CVS/Repository";


    ### write CVS files by hand

    open(REPOSITORY, ">$basepath/fink/CVS/Repository") or die "can't create $basepath/fink/CVS/Repository";
    print REPOSITORY <<"EOF";
/cvsroot/fink/dists
EOF
    close(REPOSITORY) or die "can't write $basepath/fink/CVS/Repository";
    open(ENTRIES, ">$basepath/fink/CVS/Entries") or die "can't create $basepath/fink/CVS/Entries";
    print ENTRIES <<"EOF";
D/10.1////
D/10.2////
/.cvsignore/1.1/Tue Aug 20 22:01:32 2002//
EOF
    close(ENTRIES) or die "can't write $basepath/fink/CVS/Entries";
    if (&execute("/bin/mkdir $basepath/fink/10.2/CVS")) {
      print "ERROR: Can't create directory $basepath/fink/10.2/CVS\n";
      exit 1;
    }
    if (&execute("cp $basepath/fink/10.1/CVS/Root $basepath/fink/10.2/CVS")) {
      print "ERROR: Can't copy $basepath/fink/10.1/CVS/Root to $basepath/fink/10.2/CVS\n";
      exit 1;
    }
    open(REPOSITORY, ">$basepath/fink/10.2/CVS/Repository") or die "can't create $basepath/fink/10.2/CVS/Repository";
    print REPOSITORY <<"EOF";
/cvsroot/fink/dists/10.2
EOF
    close(REPOSITORY) or die "can't write $basepath/fink/10.2/CVS/Repository";
    open(ENTRIES, ">$basepath/fink/10.2/CVS/Entries") or die "can't create $basepath/fink/10.2/CVS/Entries";
    print ENTRIES <<"EOF";
D
EOF
    close(ENTRIES) or die "can't write $basepath/fink/10.2/CVS/Entries";
    if (&execute("/usr/sbin/chown -R $username $basepath/fink/10.2/CVS")) {
      print "ERROR: Can't change ownership of $basepath/fink/10.2/CVS to $username\n";
      exit 1;
    }
}

  ### We create new symlinks in $basepath/fink/debs to point to the existing
  ### debs in the 10.1 tree
  
  my $wanted = 
    sub {
      if (($File::Find::fullname =~ /\.deb$/)) {    
	$basenm = basename($File::Find::fullname);
	unlink "$basepath/fink/debs/$basenm" ;
	symlink "$File::Find::fullname", "$basepath/fink/debs/$basenm" or die "ERROR: Can't create link from $File::Find::fullname to $basepath/fink/debs/$basenm";
      }
    };
  find ({ wanted => $wanted, follow => 1,  no_chdir => 1 }, "$basepath/fink/10.1");
}

### Now, if we are running 10.2 or later, we need to create $basepath/fink/10.2 if
### still needed, and then make a symlink

if (not $distribution =~ /10.1/) {
  if (not -d $basepath."/fink/".$distribution) {
    if(&execute("/bin/mkdir -p $basepath/fink/$distribution/local/main/finkinfo")) {
      print "ERROR: couldn't create directory $basepath/fink/$distribution/local/main/finkinfo\n";
      exit 1;
    }
    if (&execute("/usr/sbin/chown -R $username $basepath/fink/$distribution")) {
      print "ERROR: couldn't change ownership of $basepath/fink/$distribution to $username\n";
      exit 1;
    }
  }
  unlink $distdir;
  if (&execute("ln -s $distribution $distdir")) {
    print "ERROR: Can't create link from $distribution to $distdir\n";
    exit 1;
  }
 
}



exit 0;



